获 取 元 素

$('#div1')                       id为div1
$('*')                           获取范围内的所有元素
$('.div1')                       class为div1
$("p#demo")                      选取所有 id="demo" 的 <p> 元素。
$('div1~span')                   找到div1的兄弟节点为span元素，不包括兄弟节点里面的span元素
$('div1>span')                   找到idv1下面直接的span元素 如果中间有一个不是span元素 那里面即使还有span元素也找不到
$('div1+span')                   找到idv1下一个兄弟节点，并且是span元素
$('ul li')                       ul下面的li元素
$('ul li.box')                   ul下面类名为box的li
$('li')                          整个文档的所有li
$('元素:even')                   奇数位置的元素
$('元素:odd')                    偶数位置的元素
$('元素:not(选择器名)')           获取不是这个选择器名的元素
$('input:not(:checked)')         获取input中没有被选中的那个input
$('p:first')                     获取第一个p元素
$('p:last')                      获取最后一个p元素
$('ul li:first-child')           选取每个 <ul> 元素的第一个 <li> 元素
$('div1:animate')                找到div1中有运动方法的元素
$('div:eq(0)')                   就相当于$('div').eq(0)
$('div:gt(2)')                   找到下标大于2，不包括2的元素
$('div:lt(2)')                   找到下标小于2，不包括2的元素
$('div:contains('你')')          找到内容里面带'你'的那个div
$('div:empty()')                 找到内容为空的那个div会被选中
$('div span:nth-of-type(2)')     找到div中span元素中找到第二个  括号里面的数字代表位置 不代表下标
$('div span:nth-child(2)')       找到div中第二个元素必须为span，如果第二个子元素不是span,则找不到  括号里面的数字代表位置 不代表下标
$('div span:only-child')         这个div中只能有一个，并且这个子元素必须是span
$('div span:only-of-type')       这个div中可以有多个子元素，但是只能有一个span元素


$('元素[=]')                    值等于时
$('元素[^=]')                   以什么开头
$('元素[$=]')                   以什么结尾
$('元素[*=]')                   包含什么
$("[href]")                    选取所有带有 href 属性的元素。
$("[href='#']")                选取所有带有 href 值等于 "#" 的元素。
$("[href!='#']")               选取所有带有 href 值不等于 "#" 的元素。
$("[href$='.jpg']")            选取所有 href 值以 ".jpg" 结尾的元素。


JS变JQ
如果有元素是用JS的方法获取的 例如 var DIV=document.getElementById('div1');
想把这个元素变成JQ对象的话 则只需要在它的外面包一层$符  例如：$(DIV)

JQ变JS
$('#div1') ====> $('#div1')[0] 标出index下标就可以转成JS了
$('#div1') ====> $('#div1').get(0) 标出index下标就可以转成JS了


--------------------------------------------------------------------------------------
获 取 元 素 长 度
$('div').length           JQ与JS都适用
$('div').size()           只适用于JQ size()属于JQ的方法

-----------------------------------------------------------------------------------------

获 取 内 容 和 属 性
html()              相当于innerHTML，拿到开始和结束的所有结构和内容
                    如果html()括号里面没有参数，则表示获取结构和内容 默认第一个
                    如果html()括号里面有一个参数，则表示设置
val()               相当于value $('input').val(值)
text()              相当于innerText,获取文本里面的内容

attr()              设置属性       $('input').attr('abc',123)
                    设置多个属性   $('input').attr({
                                                'abc':123,
                                                'name':'小明'
                                                    });
                    如果attr()括号里面是一个参数，则表示获取对应的属性值
                    如果attr()括号里面是有两个参数，则表示设置属性和对应的值

注意：以上这四种方法同样都有回调函数：html | text | val(function(i,origText){})
      回调函数中有两个参数，其中 i        代表备选元素列表中当前元素的下标
                           origText    代表原始（旧的）值

-----------------------------------------------------------------------------------------

eq(1) eq(2)         下标
first()             相当于eq(0)
last()              相当于eq(长度-1) 最后一个
slice()             截取什么位置到什么位置的元素 $(需要截取的元素).slice(0,4) 括号里要写两个参数，第一个参数为起始位置，第二个参数为结束位置，不包含结束位置

-----------------------------------------------------------------------------------------
添 加 元 素

$('div').append(3)                        在div元素中添加内容或者结构，只不过本身内容的后面进行添加
$('<span></span>').appendTo('div')        把span元素结构添加进div结构中
$('div').prepend(3)                       在div元素中添加内容或者结构，只不过本身内容的前面进行添加
$('div').after(3)                         在div元素后面添加内容或者结构，不在div结构之中，变成后面一个兄弟节点
$('div').before(3)                        在div元素前面添加内容或者结构，不在div结构之中，变成前面一个兄弟节点
$('<div></div>').insertBefore('<p></p>')  在P元素前面添加一个div
$('<div></div>').insertAfter('<p></p>')   在P元素后面添加一个div

删 除 元 素

$('div').remove()        括号不写参数，删除被选元素及其子元素
$('div').empty()         括号不写参数，删除被选元素的子元素

----------------------------------------------------------------------------------------
i n d e x

index()             自身相对于其他指定元素的位置，没有找到就返回-1 表示当前的这个位置 $(this).index()
                    如果没有传参数 就是当前元素在所有同胞中的位置，可能会包含其他标签
                    如果传递了参数，当前元素在范围中的同胞兄弟中查找位置

--------------------------------------------------------------------------------------------

如果script写在结构之前 则要写$(function(){

                                        }) 相当于window.onload
--------------------------------------------------------------------------------------
设 置 C S S 样 式

css()                给元素设置样式

多个属性设置写法   $('#div1').css({
                          'width':'100px',
                          'height':'100px',
                          'background':'red'
                            })
JQ里面的this是指向的原声JS对象，需要进行$(this)转换才能用JQ的css来设置

如果给所有元素设置样式，可以省去for循环
如果需要获取所有元素的 需要下标或者for循环 不然默认获取的是第一个元素

hide()                           相当于display:none; $('div').hide()
show()                           相当于display:block; $('div').show()
toggle()                         切换 如果当前这个元素为出现，调用这个方法时则让它消失，如果是消失，则出现 $('div').toggle()

$('div').width(400px)            1.8版本以后，可以在width里面写参数改变样式值；不写参数则是默认获取元素的宽度，不带单位
$('div').width(400px)            1.8版本以后，可以在height里面写参数改变样式值；不写参数则是默认获取元素的高度，不带单位
$('div').innerWidth()            获取元素的宽度，包含内容+padding值，边框以里的宽度，不包含边框
$('div').outterWidth()           获取元素的宽度，包含内容+padding值+边框的宽度
$('div').outterWidth(true)       加了true参数，获取元素的宽度，包含内容+padding值+边框+margin的宽度
 ps.宽 高 同 适 用
$(window).width()                窗口可视区宽
$(window).height()               窗口可视区高
$(document).width()              整个页面宽 包含滚动条
$(document).height()             整个页面高 包含滚动条

$('div').offset().left;          无论父级是否定位，都是到整个页面最左端的距离
$('div').offset().top;           无论父级是否定位，都是到整个页面最顶端的距离
$('div').offsetParent()          这个是用来找离它最近的定位父级
$('div').position().left;        到定位父级的距离 但是不认margin值
$('div').position().top;         到定位父级的距离 但是不认margin值

--------------------------------------------------------------------------------------
c l a s s 操 作

addClass()              $('div').addClass('box2 box3 box4') 可以一次性添加多个class名
removeClass()           $('div').removeClass('box2')        删除class名
toggleClass()           $('div').toggleClass('box2')        本身class存在则删除，不存在则添加

------------------------------------------------------------------------------------------------
siblings()          兄弟节点：括号里面没有参数，则是代表结构中的同级都为兄弟节点
                             括号里写参数，例如siblings('div') 则是代表同级中并且是div的兄弟节点
filter()           filter() 方法允许您规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回。
                   下面的例子返回带有类名 "intro" 的所有 <p> 元素：
                             实例
                                 $("p").filter(".intro");
not()               与filter()相反 它是返回不匹配标准的所有元素
                    下面的例子返回 不 带有类名 "intro" 的所有 <p> 元素：
                              实例
                                  $("p").not(".intro");

-----------------------------------------------------------------------------------------------------
遍 历 D O M 树

$('div').parent()                      获取离div最近的父级元素
$('div').parents()                     括号里不写参数，获取div所有的祖先元素
                                       括号里写了参数，获取你指定的祖先元素
$('div').parentsUntil('body')          括号里面写元素，则是获取两者之间的祖先元素，不包含括号里面的元素
                                       括号里面不写，则是获取所有的祖先元素
$('div').closest()                     括号里写参数，可以找到指定的父元素，查找离他最近的父元素，自己也可以找到，只能找到唯一的结果
$('div').children()                    获取离div最近的下一级子元素
                                       括号里面写元素参数，则是找到DIV下一级中的这个元素参数，如果这个元素参数的直接下一级再包含这个参数，也会被找到
$('div').find('p')                     括号里面必须写参数，可以找到后代中所有的这个参数元素
$('div').next() | prev()               获得下(上)一个同胞元素，包含自己
$('div').nextAll('p') | prevAll('p')   括号不写参数，获得后面（前面）所有的同胞元素
                                       括号写参数，则是获得所有同胞元素中间的 P元素

$('div').nextUntil('p')|prevUntil('p') 括号里面写元素，则是获取向后（向前）两者之间的元素，不包含括号里面的元素,包含自己
                                       括号里面不写，则是获取所有向后（向前）的元素
--------------------------------------------------------------------------------------------------------------

创 建 节 点

var li=$('<li>123<li>')                创建节点
$('body').append(li)                   放入body当中  放入结构中

------------------------------------------------------------------------------------------------------------
J Q 遍 历 （ 循 环 ）

$(需要循环的元素).each(function(index,elem){                index,elem,this 都是原声JS代码 不能直接调用
   $(elem)                                                 需要用的时候，需变成JQ对象
})                                                         index 循环选中的那一项
                                                           elem  循环成功的那一项
return false                           跳出循环 阻止默认样式 阻止冒泡

-----------------------------------------------------------------------------------------------------------
滚 动  距 离

滚动条
scrollTop()                            纵向滚动距离 离上 内容超出可视区的距离
scrollLeft()                           横向滚动距离 离下 内容超出可视区的距离
括号里不写参数为获取
括号里可以写距离参数，自己可以设置距离

--------------------------------------------------------------------------------------------------------

J Q 事 件

$('div').on('click mouseover',function(){})    两个事件绑定同一个方法

$('div').on({
  click:function(){alert(1)}
  mouseover:function(){$(this).css('background','red')}  两个事件绑定不同的方法
})

$('div').off()            括号里面没有参数，则是去除当前元素的所有事件
$('div').off(mouseover)   如果要去除指定的事件，则是在括号里面写上要去除的事件


click()                  点击事件
dblclick()               双击事件
mouseenter               鼠标穿过元素时 事件
mouseleave()             当鼠标指针离开元素时 事件
mousedown()              按下鼠标事件
mouseup()                松开鼠标事件
hover()                  鼠标悬停事件,当鼠标移动到元素上时，会触发指定的第一个函数mouseenter;当鼠标移出这个元素时，会触发
                         指定的第二个函数mouseleave
                         $('div').hover(function(){
                          alert(1);
                         },
                         function(){
                         alert(2)
                         }
                         )
focus()                  获得焦点光标事件（当通过鼠标点击选中元素或者通过tab键定位到元素时，该元素会获得焦点）
blur()                   失去焦点光标事件
--------------------------------------------------------------------------------------
e v e n 对象 e v

ev.which         相当于ev.keycode 拿到键的编码

-------------------------------------------------------------------------------------
J Q  动 画

show() hide() toggle()       括号里面没有参数时，表现的非常快。
                             括号里面接收两个参数('速度',回调函数)
                             速度参数默认值：fast normal slow;也可以写数字，单位为毫秒
show('速度',回调函数)         改变的是元素的宽度，高度，透明值
hide('速度',回调函数)         改变的是元素的宽度，高度，透明值
toggle('速度',回调函数)       改变的是元素的宽度，高度，透明值

fadeIn('速度'，回调函数)        淡入 不改变宽高，只改变透明值
fadeOut('速度'，回调函数)       淡出 不改变宽高，只改变透明值为0，状态变成display:none;
fadeToggle('速度'，回调函数)    淡入淡出 切换
fade To('速度',透明值,回调函数) 变化到什么透明度 参数介于0-1之间 例如： $('div').fadeTo('slow',0.7);

slideDown('速度'，回调函数)     向下滑动出现元素 用于被隐藏的元素
slideUp('速度'，回调函数)       向上滑动隐藏元素 用于出现的元素
slideToggle('速度'，回调函数)   切换


animate(运动形式,缓冲时间,匀速或者其他，回调函数)
        1.如需对位置进行操作，一定要记得把元素的CSS position属性设置为relative|fixed|absolute
        2.animate()方法几乎可以操作所有的CSS属性。但是需要注意的是：必须使用Camel标记法书写所有的属性名，
          例如：padding-left 要写成 paddingLeft
               margin-right 要写成 marginRight


            $('div').animate({
            width:'300px',          可以写成运算表达式的形式 例如 +=100 或者-=100 则表示每次在原基础上加或减
            height:'300px'
            },1000,'linear',回调函数)   整合形式

            $('div').animate({
            width:'300px',
            height:'300px'
            },{duration:1000,
              easing:linear,
              conplete:function(){
              alert(1)
              }
              step:function(a,b){    step 这个函数传参，a可以记录运动数值的变化过程,b可以记录运动的对象
                                          要使用这个函数，必须animate有第一个参数
              }
             })            写成对象形式

animate 运动队列
             $('div').animate({
             width:'300px'
             },1000)
             $('div').animate({
             height:'300px'
             },1000)
             $('div').animate({
             opacity:0.5                这样会一项一项的执行
             },1000)
        运动队列可以进行链式操作
              $('div').animate({
              width:'300px'
              },1000).animate({
              height:'300px'
              },1000).animate({
              opacity:0.5
              },1000)
延迟时间 delay(时间)           $('div').animate({
                                width:'300px'
                             },1000).delay(2000)

stop(stopAll,goToEnd)
            第一个参数stopAll的默认值是false,如果没有传入就是停止当时运动的那一个参数队列，如果写成true,则是停止全部参数队列
            第二个参数goToEnd的默认值为false,如果没有传入则是当前位置停止，如果传入true 则在终点位置停止
finish()    不需要传参数，无论有没有运动完，直接停止在终点位置

-----------------------------------------------------------------------------------------------
JQ 链 式 操 作

通过JQ，可以把动作|方法链接在一起，允许我们在一条语句运行多个JQ方法（在相同的元素上）

我们可以写在一排，但是这样书写比较杂乱，可以按照下面的例子进行工整的写法：
                                                                    例如：
                                                                             $('div').css('background','green')
                                                                              .slideUp(2000)
                                                                              .slideDown(2000);
                                                                        JQ会抛掉多余的空格，并当成一行长代码来执行上面的代码行
-----------------------------------------------------------------------------------------------------

AJAX 阿贾克斯 只刷新局部页面的技术

自己电脑的主机IP地址 127.0.0.1

工具方法
                    $.ajax()                  ★★★★★
                    什么是ajax
                    提交数据   ,  查询数据
                    url
                    success
                    Type  get/post
                    data   查询的数据
                    Error     404   // 500  跟前端没关系
                    dataType
                    async


            $.ajax({                                      用对象的形式来写
              url:'user.php',                             发送请求的地址
              data:{'name':$(this).val()},                请求的数据
              type:'GET',                                 提交方式有GET和POST 两种
              datatype:'json'                             如果后台是按照JSON格式来写字符串的话，则可以直接在数据类型这里填写json,这样就可以直接用data
              success:function(data){                     传入参数，接受后台传递的数据
                if(data==1){
                  $('div').html('已经有人注册了！')        判断语句
                }else{
                  $('div').html('注册成功！')
                }
              },
              error:function(){
                console.log(222)
              }
            })

$.parseJSON(data)              将后台的字符串转为json格式，此时data必须是严格按照json格式来书写的
$.parseHTML(data)              将后台的字符串转为元素节点
async:true|false               异步：发送请求后不等返回结果，由回调函数处理结果,不会影响下面代码的执行
      异步 |同步                同步：等上面执行完代码后，再执行下面的代码

jQuery load() 方法
                                jQuery load() 方法是简单但强大的 AJAX 方法。
                                load() 方法从服务器加载数据，并把返回的数据放入被选元素中。
                                语法：
                                $(selector).load(URL,data,callback);
                                  必需的 URL 参数规定您希望加载的 URL。
                                  可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。
                                  可选的 callback 参数是 load() 方法完成后所执行的函数名称。

GET vs POST
                                  两种在客户端和服务器端进行请求-响应的常用方法是：GET 和 POST。
                                  GET - 从指定的资源请求数据
                                  POST - 向指定的资源提交要处理的数据
                                  GET 基本上用于从服务器获得（取回）数据。注释：GET 方法可能返回缓存数据。
                                  POST 也可用于从服务器获取数据。不过，POST 方法不会缓存数据，并且常用于连同请求一起发送数据。

---------------------------------------------------------------------------------------------------

事 件 委 托 与 取 消


$('ul').delegate('li','click',function(ev){                 绑在ul身上的点击事件，委托给li来执行
      $(this).css('background','red')                       此时的this是指向执行的元素，虽然点击事件是ul绑定的，但是ul是委托li来执行的，所以this指向li
      $(ev.delegateTarget).css('background','green')        ev.delegateTarget是用来表示委托者ul,但是这个是原生JS元素，所以必须加$来变成JQ对象
      $('ul').undelegate('click mouseover')                 取消ul身上的事件委托
})

------------------------------------------------------------------------------------------------------------

t r i g g l e  主 动 触 发

一个事件的发生时主动触发另一个事件，则可以用triggle

例如：

        $('input').click(function(){                  在input点击时，
        if(条件){
         $('div').triggle('mouseover')                 主动触发div的鼠标滑动事件
        }
        })

----------------------------------------------------------------------------------------------------------------

J Q 插 件

www.jq22.com 插件网站

$.extend({                                 扩展插件 静态扩展
 任意方法名字:function(参数){
     写JQ代码                               this指向$
 }
})
 $.任意方法名(参数)                           调用

$.fn.pluginName=function(参数){            扩展插件 动态扩展   pluginName 插件名
     写JQ代码                              this指向调用这个方法的元素
}
元素.pluginName(参数)                          调用
----------------------------------------------------------------------------------------------------------------------
 克 隆 clone

 $('div').clone()                            克隆div节点
 $('div').clone(true)                        括号里面写参数true 则是连元素身上的事件也一起克隆了
 $('body').append($('div').clone())          放到body中

 -----------------------------------------------------------------------------------------------------

 J Q 队 列

 $.queue() 入队
 $.dequeue() 入队
 $(入到那个元素下，队伍的名称，函数) 第三个参数是入队的对象，这个对象只能是函数

      例： function a(){
            alert(1)
            }
            function b(){
                  alert(2)
                  }
          function c(){
                alert(3)
                  }
      入队 $.queue(document,'fn',a)  a入队
           $.queue(document,'fn',b) b入队 （此时队伍里面有a,b）
          $.queue(document,'fn',c)  c入队  （此时队伍里面有a,b,c）
      出队 $.dequeue(document,'fn') 第一个出队 a
          $.dequeue(document,'fn') 第二个出队 b
          $.dequeue(document,'fn') 第三个出队 c

运 动 队 列
          $('div').animate({
          width:'300px'
          },1000)
          $('div').queue('fx',function(){    fx是运动函数的名称 固定写法
           setTimeout(function(){
          $('div').dequeue('fx')             出队
           },1000)
          })
          $('div').animate({
          height:'300px'
          },1000)

---------------------------------------------------------------------------------------------------

回 调 函 数

$.Callbacks()    生成一个管理一群函数的对象，返回值就是对象列表
var p=$.Callbacks()
    p.add()      对象列表中就有一个函数
    p.fire()     对象列表中有哪些就调用哪些

$.Callbacks('once')  只调用一次
$.Callbacks('memory')  前面的代码调用后，后面的代码也一样会被调用
$.Callbacks('unique')  去重 去掉重复的调用
$.Callbacks('stopOnFalse') 阻止后面代码进行 要和return false一起用 函数里面写了return false 的可以被调用 其他一起调用的就会被阻止

延 迟 函 数

$.Deferred()   延迟函数是回调函数的衍生物             其实功能就和Callbacks的解决函数异步问题
var p=$.Deferred()
    p.done() | fail()       对象列表中成功加入一个函数 | 加入函数失败
    p.resolve() | reject()     对象列表中有哪些就调用解决哪些 | 就不解决这个函数
