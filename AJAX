
AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。

AJAX 不是新的编程语言，而是一种使用现有标准的新方法。

AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下。

============================================================================

一、创建 XMLHttpRequest 对象 

XMLHttpRequest 对象用于和服务器交换数据
 
XMLHttpRequest是AJAX的基础，所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。

创建 XMLHttpRequest 对象的语法：
            variable=new XMLHttpRequest();

老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：
            variable=new ActiveXObject("Microsoft.XMLHTTP");

为了综合应对所有浏览器的支持，所以应该这么写：

        var xmlhttp;
        if (window.XMLHttpRequest)
        {// code for IE7+, Firefox, Chrome, Opera, Safari
        xmlhttp=new XMLHttpRequest();
        }
        else
        {// code for IE6, IE5
        xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
        }

========================================================================================

二、AJAX 向服务器发送请求

如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法：

xmlhttp.open("GET","ajax_info.txt",true);

open(method,url,async)    规定请求的类型，URL以及是否异步处理请求
                          method：请求的类型；GET 或 POST
                          url：文件在服务器上的位置，该文件可以是任何类型的文件，比如 .txt 和 .xml，或者服务器脚本文件，比如 .asp 和 .php （在传回响应之前，能够在服务器上执行任务）。
                          async：true（异步）或 false（同步）

                            Async=true
                            当使用 async=true 时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数：

                                                                                                xmlhttp.onreadystatechange=function()
                                                                                                {
                                                                                                if (xmlhttp.readyState==4 && xmlhttp.status==200)
                                                                                                    {
                                                                                                    document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
                                                                                                    }
                                                                                                }
                                                                                                xmlhttp.open("GET","ajax_info.txt",true);
                                                                                                xmlhttp.send();

                          async=false 时，请不要编写 onreadystatechange 函数 - 把代码放到 send() 语句后面即可：

                                                                                                xmlhttp.open("GET","ajax_info.txt",false);
                                                                                                xmlhttp.send();
                                                                                                document.getElementById("myDiv").innerHTML=xmlhttp.responseText;


xmlhttp.send();

send(string)              将请求发送到服务器。
                          string：仅用于 POST 请求 如果是GET请求，则send()就行



GET 还是 POST？
与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。
然而，在以下情况中，请使用 POST 请求：

                                    无法使用缓存文件（更新服务器上的文件或数据库）

                                    向服务器发送大量数据（POST 没有数据量限制）

                                    发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠

例子： GET请求

       xmlhttp.open("GET","demo_get.html?t="+Math.random(),true)
       xmlhttp.send()
       如果不向URL添加唯一的ID，则可能得到的是缓存的结果

       如果您希望通过 GET 方法发送信息，请向 URL 添加信息：
       xmlhttp.open("GET","demo_get2.html?fname=Henry&lname=Ford",true);
       xmlhttp.send();

       POST请求
       xmlhttp.open("POST","demo_post.html",true);
       xmlhttp.send();

       如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。
       然后在 send() 方法中规定您希望发送的数据：
        xmlhttp.open("POST","ajax_test.html",true);
        xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");
        xmlhttp.send("fname=Henry&lname=Ford");

================================================================================================

三、setRequestHeader(header,value) 向请求添加HTTP头
                               header：规定头的名称
                               value: 规定头的值

CONTENT-TYPE:application/x-www-form-urlencoded 表示客户端提交给服务器文本内容的编码方式 是URL编码，即除了标准字符外，每字节以双字节16进制前加个%表示
CONTENT-TYPE:multipart/form-data               表示窗体数据被编码为一条消息，页上的每个控件对应消息中的一个部分，这个一般文件上传时用。
CONTENT-TYPE:text/plain                        表示窗体数据以纯文本形式进行编码，其中不含任何控件或格式字符。 
Content-length                                 就是表示提交的数据字节大小 

==============================================================================================================

四、XHR 响应

AJAX - 服务器 响应

如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。

responseText	 获得字符串形式的响应数据。       document.getElementById("myDiv").innerHTML=xmlhttp.responseText;

responseXML	     获得 XML 形式的响应数据。        xmlDoc=xmlhttp.responseXML;
                                                txt="";
                                                x=xmlDoc.getElementsByTagName("ARTIST");
                                                for (i=0;i<x.length;i++)
                                                {
                                                txt=txt + x[i].childNodes[0].nodeValue + "<br>";
                                                }
                                                document.getElementById("myDiv").innerHTML=txt;

===================================================================================================================

五、XHR readyState

AJAX - onreadystatechange 事件

当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 readyState 改变时，就会触发 onreadystatechange 事件。readyState 属性存有 XMLHttpRequest 的状态信息。

onreadystatechange	存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。

readyState 存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。
                                                        0: 请求未初始化
                                                        1: 服务器连接已建立
                                                        2: 请求已接收
                                                        3: 请求处理中
                                                        4: 请求已完成，且响应已就绪

status	 相应HTTP状态
        200: "OK"
        404: 未找到页面,语法错误导致服务器不识别
        401: 请求需要用户认证
        404: 只听的URL在服务器上找不到
        500: 服务器遇到意外错误,无法完成请求
        503: 犹豫服务器过载或维护导致无法完成请求

实例： xmlhttp.onreadystatechange=function()
        {
        if (xmlhttp.readyState==4 && xmlhttp.status==200)      //当 readyState 等于 4 且状态为 200 时，表示响应已就绪：
            {
            document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
            }
        }
 statusText  HTTP状态的说明

====================================================================================================================================

AJAX 阿贾克斯 只刷新局部页面的技术

自己电脑的主机IP地址 127.0.0.1

工具方法
                    $.ajax()                  ★★★★★
                    什么是ajax
                    提交数据   ,  查询数据
                    url
                    success
                    Type  get/post
                    data   查询的数据
                    Error     404   // 500  跟前端没关系
                    dataType
                    async

--------------------------------------

load()方法是局部方法,他需要一个元素对象作为前缀.适合做静态文件的异步获取.
jQuery load() 方法              这是jQuery ajax的局部方法
                                jQuery load() 方法是简单但强大的 AJAX 方法。
                                load() 方法从服务器加载数据，并把返回的数据放入被选元素中。
                                语法：
                                $(selector).load(URL,data,callback);
                                  必需的 URL 参数规定您希望加载的 URL。
                                  可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。(如果是GET方式,则参数是在后面加上"?a=b",其中
                                  a为key值,b为value值;POST方式的话,则必须写成键值对的形式"{a:b}"                                  
                                  可选的 callback 参数是 load() 方法完成后所执行的函数名称。
                                  callback回调函数:function(response,status,xhr){
                                                   //response就是返回的值,status为状态值有两个success和error,可以用来做判断
                                                     xhr是XMLHRequest对象
                                                   }
                                                   
                                                   
$.get()和$.post()是全局方法,无需指定某个元素.适合需要传递参数到服务器页面的.


$.get()   全局方法 第二层
           $.get(url,data,callback,type)
           type为服务器返回的数据类型
           传参形式: 1.通过直接在url问号紧跟传参
                       如果url为test.php ,则传参写法为$.get('test.php?a=b',type,callback)
                    2.通过参数data来传参,对象形式的键值对传参
                       $.get('test.php',{
                           a:'b'
                       },type,callback)
                    3.通过参数data来传参,字符串形式的键值对传参
                       $.get('test.php','a=b',type,callback)


$.post()   全局方法 第二层
           $.post(url,data,callback,type)
           传参形式: 1.不能通过问号传参
                    2.通过参数data来传参,对象形式的键值对传参
                       $.post('test.php',{
                           a:'b'
                       },type,callback)
                    3.通过参数data来传参,字符串形式的键值对传参
                       $.post('test.php','a=b',type,callback)


$.getJSON   全局方法 第三层
            $.getJSON(url,data,callback) 
            看方法就知道,这是只用于JSON格式,所以它不需要第四个参数来规定返回类型,直接为JSON类型


            $.getScript('index.js') 这个主要是用于在异步加载时,再加载这个JS文件
             一般平常直接引入JS文件,会在页面出来时就直接加载了,但是如果你只需在异步处理交互数据才需要
             这个JS文件处理的话,可以只在这个时候来进行加载.一般常用于一个参数.



 $.ajax()   全局方法 最底层的方法
            $.ajax({                                      用对象的形式来写
              url:'user.php',                             发送请求的地址
              data:{'name':$(this).val()},                请求的数据
              type:'GET',                                 提交方式有GET和POST 两种
              datatype:'json'                             如果后台是按照JSON格式来写字符串的话，则可以直接在数据类型这里填写json,这样就可以直接用data
              success:function(data){                     传入参数，接受后台传递的数据
                if(data==1){
                  $('div').html('已经有人注册了！')        判断语句
                }else{
                  $('div').html('注册成功！')
                }
              },
              error:function(,errorText,errorType){
                console.log(222)
              }
            })
            
            
             $.ajax({                                     
              url:'user.php',                            
              data:{'name':$(this).val()},                
              type:'GET',                                 
              datatype:'json'                            
              success:function(response,status,xhr){                     
                
              },
              error:function(){
                console.log(222)
              }
            })
            
            
 $.ajaxSetup    全局方法  对于多个ajax用于初始化重复的属性

                  $('form input[type=button]').click(function(){
                     $.ajaxSetup({
                         type:'POST',
                         url:'user.php',
                         data:$('form).serialize(), 
                     })
                 })         上面这些属性是重复出现并且内容一样的,则用这个方法初始化重复的属性

                  $('form input[type=button]').click(function(){
                     $.ajax({ 
                         sucess:function(reponse,status,xhr){
                             $('#box').html(response);
                         }
                     })
                 })       初始化重复的属性后,则其他的ajax,则只需写不同的部分



$.param()     全局方法  主要用于复杂的data参数以对象形式来传递时,当用表单序列化serialize()方法解读不开时,则用这个方法来解读开来

                $('form input[type=button]').click(function(){
                 $.ajax({
                     type:'POST',
                     url:'user.php',
                     data:$.param({                  --------此处运用
                         user:$('form input[name=user]').val(),
                         email:$('form input[name=email]').val()
                     }),
                     sucess:function(reponse,status,xhr){
                         $('#box').html(response);
                     }
                 })
             })



.ajaxStart()  .ajaxStop()
加载请求事件: 在ajax异步发送请求,遇到网速较慢的情况,就会出现请求时间较长的问题,
              而超过一定的时间请求,用户就会变得不耐烦而关闭页面.而如果在请求期间
              能给用户一些提示:比如:正在努力加载中..,那么用户体验会更好.
              
              所以JQ提供了两个全局事件 .ajaxStart()  .ajaxStop()

              当用户触发ajax请求开始时(未完成其他请求)激活.ajaxStart()
              请求结束时(所有请求都结束了)激活.ajaxStop()
              这两个事件绑定在document上
              $(dcument).ajaxStart(function({
                  $('loading').show();
              })).ajaxStop(function(){
                $('loading').hide();
              })
              
设置超时:    如果加载时间过长,可以在ajax里面设置超时

              $.ajax({
                 timeout:3000    设置超时的时间
              })

取消全局事件: 因为全局事件会影响性能,所以可以加条这样的属性来不触发全局事件
             $.ajax({
              global:false
              })
 报错方法: 
           局部错误方法
           $.ajax({
            error:function(xhr,errorText,errorType){  
             alert(errorText+":"+errorType)
            }
           })
     
           $.post()方法的话,报错需这么写
           $.post().error(function(xhr,errorText,errorType){
              alert()
            })
            
            全局错误方法
              $(document).ajaxError(function(event,xhr,settings,errorType){
                                
               //event      事件对象
               //settings   settings.url 得到你本次提交的url
                            settings.type 得到你本次提交模式
              })
              
  成功方法:     全局方法这种形式的 都是绑在 $(document)上面
               .ajaxSuccess()  全局方法  .success() 局部方法     -------请求成功完成时执行
               .ajaxComplete() 全局方法   .complete() 局部方法   -------请求完成后注册一个回调函数,只要完成就可以了,不需要成功
               .ajaxSend()      全局方法   没有对应的局部方法,只有属性beforeSend  ------请求发送之前要绑定的函数 和 .ajaxStart()类似
            
           
           
------------------------------------------


$.parseJSON(data)              将后台的字符串转为json格式，此时data必须是严格按照json格式来书写的
$.parseHTML(data)              将后台的字符串转为元素节点
async:true|false               异步：发送请求后不等返回结果，由回调函数处理结果,不会影响下面代码的执行
      异步 |同步                同步：等上面执行完代码后，再执行下面的代码



GET vs POST
                                  两种在客户端和服务器端进行请求-响应的常用方法是：GET 和 POST。
                                  GET - 从指定的资源请求数据
                                  POST - 向指定的资源提交要处理的数据
                                  GET 基本上用于从服务器获得（取回）数据。注释：GET 方法可能返回缓存数据。
                                  POST 也可用于从服务器获取数据。不过，POST 方法不会缓存数据，并且常用于连同请求一起发送数据。
                    


======================================================================================================================================

在写ajax之前，1.必须先要后端写好接口，接口是做什么的，里面的数据是什么，这些地址上的参数代表什么意思，怎么改，然后这个接口它回复的结果是什么？最好有文档。
             2.认真，仔细看ajax的api，仔细，先复制过来都没事。别有啥格式写错了，按照标准格式写，注意数组和对象的区别。
             3.思路 前后端交互 调试的整体思路

前端传输数据到后端：1. 需要知道两个接口，一个传输的接口，一个总的显示的地址，问清楚地址上的参数哪些是可以修改的，什么意思？
                  2. 然后直接在传的地址栏写死一些必须的参数，回车。然后看总的显示整个数组的地址栏的页面里面有没有新出来这条数据，如果没这条数据，那么后端没写对。
                  3. 先用get方式写，注意ajax的格式不要错漏了
                  4. 然后你格式写对了，在memroy里面有一个关于发送成功的项，我忘记了，不过很容易找到，那里要显示200
                  5. 要有后端写好的回馈信息
                  6. 当然这是在你认为格式写对，后端接口没错误下，可是偏偏没有发送过去情况下，进行的验证，在network
                  7. 大概就这样了，要注意问详细接口作用、参数！！！  多沟通， 格式别粗心


======================================================================================================================================

跨域： 

要理解跨域，先要了解一下“同源策略”。所谓同源是指，域名，协议，端口相同。所谓“同源策略“，简单的说就是基于安全考虑，当前域不能访问其他域的东西。

JSONP:

是 JSON with padding（填充式 JSON 或参数式 JSON）的简写。
JSONP实现跨域请求的原理简单的说，就是动态创建<script>标签，然后利用<script>的src 不受同源策略约束来跨域获取数据。
JSONP 由两部分组成：回调函数和数据。回调函数是当响应到来时应该在页面中调用的函数。回调函数的名字一般是在请求中指定的。而数据就是传入回调函数中的 JSON 数据。

动态创建<script>标签，设置其src，回调函数在src中设置：

                                var script = document.createElement("script");
                                script.src = "https://api.douban.com/v2/book/search?q=javascript&count=1&callback=handleResponse";
                                document.body.insertBefore(script, document.body.firstChild);

在页面中，返回的JSON作为参数传入回调函数中，我们通过回调函数来来操作数据。

                                function handleResponse(response){
                                // 对response数据进行操作代码
                                }
        
 实例： 
        <script type="text/javascript">
                function handleResponse(response){
                        console.log(response);
                }
                </script>
                <script type="text/javascript">
                window.onload = function() {

                var oBtn = document.getElementById('btn');

                oBtn.onclick = function() {     

                        var script = document.createElement("script");
                        script.src = "https://api.douban.com/v2/book/search?q=javascript&count=1&callback=handleResponse";
                        document.body.insertBefore(script, document.body.firstChild);

                };
                };
        </script>
-------------------------------------------


jQuery封装JSONP实现跨域：

对于经常用jQuery的开发者来说，能注意到jQuery封装的$.ajax中有一个dataType属性，如果将该属性设置成dataType:"jsonp"，就能实现JSONP跨域了。
需要了解的一点是，虽然jQuery将JSONP封装在$.ajax中，但是其本质与$.ajax不一样。

      <script type="text/javascript">
    $(function(){
        $("#btn").click(function(){

            $.ajax({
                async : true,
                url : "https://api.douban.com/v2/book/search",
                type : "GET",
                dataType : "jsonp", // 返回的数据类型，设置为JSONP方式
                jsonp : 'callback', //指定一个查询参数名称来覆盖默认的 jsonp 回调参数名 callback
                jsonpCallback: 'handleResponse', //设置回调函数名
                data : {               //参数数据
                    q : "javascript", 
                    count : 1
                }, 
                success: function(response, status, xhr){
                    console.log('状态为：' + status + ',状态是：' + xhr.statusText);
                    console.log(response);
                }
            });
        });
    });
</script>


======================================================================================================================
表单提交

html文件: 
<form>
    用户名:<input type="text" name="user" />
    邮件:<input type="text" name="email" />
    <input type="button" value="提交">
</form>
<div id="box"></div>

第一种方法:

 $('form input[type=button]').click(function(){
     $.ajax({
         type:'POST',
         url:'user.php',
         data:{
             user:$('form input[name=user]').val(),
             email:$('form input[name=email]').val()
         },
         sucess:function(reponse,status,xhr){
             $('#box').html(response);
         }
     })
 })

  缺点:表单元素非常多的情况下,写起来非常麻烦,容易出错
  复制提交的JS内容时,data属性需要修改的非常多

  第二种方法:表单序列化的方法

  $('form input[type=button]').click(function(){
    $.ajax({
        type:'POST',
        url:'user.php',
        data:$('form).serialize(), //此处进行表单序列化,就这么一个方法就搞定了上面的所有取值
        sucess:function(reponse,status,xhr){
            $('#box').html(response);
        }
    })
})

 $('form).serialize()这样序列化其实得到的数据就是a=b&c=d的键值对形式,并且还对url进行了编码

 <form>
    用户名:<input type="text" name="user" />
    邮件:<input type="text" name="email" />
    <input type="radio" name="sex"value="男"> 男
    <input type="radio" name="sex"value="女"> 女
    <input type="button" value="提交">
</form>
<div id="box"></div>

让点击这个男女选项时,打印出sex=男或者sex=女
 $('form input[name=sex]').click(function(){
     $('#box').html($(this).serialize())  //这样打出来是 sex=%jdfsjdkfk% 这种类似的形式,因为
                                          serialize对其进行了编码
                                           如果要解码的话要用到下面的方法
                                           $('#box').html(decodeURLComponent($(this).serialize()))
                                          这样打出来的就是 sex=男或者sex=女了
 })

如果你要显示的是json数据的话  则是用$(this).serializeArray(),但是json数据要体现在页面上的话
可以先赋值给一个变量,再体现:  var json = $(this).serializeArray().
                           $('#box').html(json[0].value)


====================================================

 jqXHR 就是 $.ajax()返回的对象
          如果使用jqXHR对象的话,那么建议用.done() .always()  .fail() 代替 .success()  .complete() .error()
 var jqXHR =  $.ajax({
               type:'POST',
               url:'user.php',
               data:$("form").serialize()
           });
      jqXHR.done(function(response){
        alert(response +'1')        --------------可以多次执行同一个回调函数
      }).done(function(response){   --------------可以连缀操作,可读性大大提高
        alert(response +'2')
      })
   
   可以为多个操作指定回调函数:
    以前的方法:
    var jqXHR1 =  $.ajax('t1.php');
    var jqXHR2 =  $.ajax('t2.php');
    
          jqXHR1.done(function(response){            
            alert(response)     -------相同的回调函数    
          })
          jqXHR2.done(function(response){
            alert(response)     -------相同的回调函数      
          })
      使用$.when(jqXHR1,jqXHR2).done(function(r1,r2){
         alert(r1[0]);
         alert(r2[0]);
      }) --------------------可以一次性执行这个回调函数
    

      

