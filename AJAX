
AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。

AJAX 不是新的编程语言，而是一种使用现有标准的新方法。

AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下。

============================================================================

一、创建 XMLHttpRequest 对象 

XMLHttpRequest 对象用于和服务器交换数据
 
XMLHttpRequest是AJAX的基础，所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。

创建 XMLHttpRequest 对象的语法：
            variable=new XMLHttpRequest();

老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：
            variable=new ActiveXObject("Microsoft.XMLHTTP");

为了综合应对所有浏览器的支持，所以应该这么写：

        var xmlhttp;
        if (window.XMLHttpRequest)
        {// code for IE7+, Firefox, Chrome, Opera, Safari
        xmlhttp=new XMLHttpRequest();
        }
        else
        {// code for IE6, IE5
        xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
        }

========================================================================================

二、AJAX 向服务器发送请求

如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法：

xmlhttp.open("GET","ajax_info.txt",true);

open(method,url,async)    规定请求的类型，URL以及是否异步处理请求
                          method：请求的类型；GET 或 POST
                          url：文件在服务器上的位置，该文件可以是任何类型的文件，比如 .txt 和 .xml，或者服务器脚本文件，比如 .asp 和 .php （在传回响应之前，能够在服务器上执行任务）。
                          async：true（异步）或 false（同步）

                            Async=true
                            当使用 async=true 时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数：

                                                                                                xmlhttp.onreadystatechange=function()
                                                                                                {
                                                                                                if (xmlhttp.readyState==4 && xmlhttp.status==200)
                                                                                                    {
                                                                                                    document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
                                                                                                    }
                                                                                                }
                                                                                                xmlhttp.open("GET","ajax_info.txt",true);
                                                                                                xmlhttp.send();

                          async=false 时，请不要编写 onreadystatechange 函数 - 把代码放到 send() 语句后面即可：

                                                                                                xmlhttp.open("GET","ajax_info.txt",false);
                                                                                                xmlhttp.send();
                                                                                                document.getElementById("myDiv").innerHTML=xmlhttp.responseText;


xmlhttp.send();

send(string)              将请求发送到服务器。
                          string：仅用于 POST 请求 如果是GET请求，则send()就行



GET 还是 POST？
与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。
然而，在以下情况中，请使用 POST 请求：

                                    无法使用缓存文件（更新服务器上的文件或数据库）

                                    向服务器发送大量数据（POST 没有数据量限制）

                                    发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠

例子： GET请求

       xmlhttp.open("GET","demo_get.html?t="+Math.random(),true)
       xmlhttp.send()
       如果不向URL添加唯一的ID，则可能得到的是缓存的结果

       如果您希望通过 GET 方法发送信息，请向 URL 添加信息：
       xmlhttp.open("GET","demo_get2.html?fname=Henry&lname=Ford",true);
       xmlhttp.send();

       POST请求
       xmlhttp.open("POST","demo_post.html",true);
       xmlhttp.send();

       如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。
       然后在 send() 方法中规定您希望发送的数据：
        xmlhttp.open("POST","ajax_test.html",true);
        xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");
        xmlhttp.send("fname=Henry&lname=Ford");

================================================================================================

三、setRequestHeader(header,value) 向请求添加HTTP头
                               header：规定头的名称
                               value: 规定头的值

CONTENT-TYPE:application/x-www-form-urlencoded 表示客户端提交给服务器文本内容的编码方式 是URL编码，即除了标准字符外，每字节以双字节16进制前加个%表示
CONTENT-TYPE:multipart/form-data               表示窗体数据被编码为一条消息，页上的每个控件对应消息中的一个部分，这个一般文件上传时用。
CONTENT-TYPE:text/plain                        表示窗体数据以纯文本形式进行编码，其中不含任何控件或格式字符。 
Content-length                                 就是表示提交的数据字节大小 

==============================================================================================================

四、XHR 响应

AJAX - 服务器 响应

如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。

responseText	 获得字符串形式的响应数据。       document.getElementById("myDiv").innerHTML=xmlhttp.responseText;

responseXML	     获得 XML 形式的响应数据。        xmlDoc=xmlhttp.responseXML;
                                                txt="";
                                                x=xmlDoc.getElementsByTagName("ARTIST");
                                                for (i=0;i<x.length;i++)
                                                {
                                                txt=txt + x[i].childNodes[0].nodeValue + "<br>";
                                                }
                                                document.getElementById("myDiv").innerHTML=txt;

===================================================================================================================

五、XHR readyState

AJAX - onreadystatechange 事件

当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 readyState 改变时，就会触发 onreadystatechange 事件。readyState 属性存有 XMLHttpRequest 的状态信息。

onreadystatechange	存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。

readyState 存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。
                                                        0: 请求未初始化
                                                        1: 服务器连接已建立
                                                        2: 请求已接收
                                                        3: 请求处理中
                                                        4: 请求已完成，且响应已就绪

status	
        200: "OK"
        404: 未找到页面

实例： xmlhttp.onreadystatechange=function()
        {
        if (xmlhttp.readyState==4 && xmlhttp.status==200)      //当 readyState 等于 4 且状态为 200 时，表示响应已就绪：
            {
            document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
            }
        }

====================================================================================================================================

AJAX 阿贾克斯 只刷新局部页面的技术

自己电脑的主机IP地址 127.0.0.1

工具方法
                    $.ajax()                  ★★★★★
                    什么是ajax
                    提交数据   ,  查询数据
                    url
                    success
                    Type  get/post
                    data   查询的数据
                    Error     404   // 500  跟前端没关系
                    dataType
                    async


            $.ajax({                                      用对象的形式来写
              url:'user.php',                             发送请求的地址
              data:{'name':$(this).val()},                请求的数据
              type:'GET',                                 提交方式有GET和POST 两种
              datatype:'json'                             如果后台是按照JSON格式来写字符串的话，则可以直接在数据类型这里填写json,这样就可以直接用data
              success:function(data){                     传入参数，接受后台传递的数据
                if(data==1){
                  $('div').html('已经有人注册了！')        判断语句
                }else{
                  $('div').html('注册成功！')
                }
              },
              error:function(){
                console.log(222)
              }
            })

$.parseJSON(data)              将后台的字符串转为json格式，此时data必须是严格按照json格式来书写的
$.parseHTML(data)              将后台的字符串转为元素节点
async:true|false               异步：发送请求后不等返回结果，由回调函数处理结果,不会影响下面代码的执行
      异步 |同步                同步：等上面执行完代码后，再执行下面的代码

jQuery load() 方法
                                jQuery load() 方法是简单但强大的 AJAX 方法。
                                load() 方法从服务器加载数据，并把返回的数据放入被选元素中。
                                语法：
                                $(selector).load(URL,data,callback);
                                  必需的 URL 参数规定您希望加载的 URL。
                                  可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。(如果是GET方式,则参数是在后面加上"?a=b",其中
                                  a为key值,b为value值;POST方式的话,则必须写成键值对的形式"{a:b}"                                  
                                  可选的 callback 参数是 load() 方法完成后所执行的函数名称。

GET vs POST
                                  两种在客户端和服务器端进行请求-响应的常用方法是：GET 和 POST。
                                  GET - 从指定的资源请求数据
                                  POST - 向指定的资源提交要处理的数据
                                  GET 基本上用于从服务器获得（取回）数据。注释：GET 方法可能返回缓存数据。
                                  POST 也可用于从服务器获取数据。不过，POST 方法不会缓存数据，并且常用于连同请求一起发送数据。


======================================================================================================================================

在写ajax之前，1.必须先要后端写好接口，接口是做什么的，里面的数据是什么，这些地址上的参数代表什么意思，怎么改，然后这个接口它回复的结果是什么？最好有文档。
             2.认真，仔细看ajax的api，仔细，先复制过来都没事。别有啥格式写错了，按照标准格式写，注意数组和对象的区别。
             3.思路 前后端交互 调试的整体思路

前端传输数据到后端：1. 需要知道两个接口，一个传输的接口，一个总的显示的地址，问清楚地址上的参数哪些是可以修改的，什么意思？
                  2. 然后直接在传的地址栏写死一些必须的参数，回车。然后看总的显示整个数组的地址栏的页面里面有没有新出来这条数据，如果没这条数据，那么后端没写对。
                  3. 先用get方式写，注意ajax的格式不要错漏了
                  4. 然后你格式写对了，在memroy里面有一个关于发送成功的项，我忘记了，不过很容易找到，那里要显示200
                  5. 要有后端写好的回馈信息
                  6. 当然这是在你认为格式写对，后端接口没错误下，可是偏偏没有发送过去情况下，进行的验证，在network
                  7. 大概就这样了，要注意问详细接口作用、参数！！！  多沟通， 格式别粗心


======================================================================================================================================

跨域： 

要理解跨域，先要了解一下“同源策略”。所谓同源是指，域名，协议，端口相同。所谓“同源策略“，简单的说就是基于安全考虑，当前域不能访问其他域的东西。

JSONP:

是 JSON with padding（填充式 JSON 或参数式 JSON）的简写。
JSONP实现跨域请求的原理简单的说，就是动态创建<script>标签，然后利用<script>的src 不受同源策略约束来跨域获取数据。
JSONP 由两部分组成：回调函数和数据。回调函数是当响应到来时应该在页面中调用的函数。回调函数的名字一般是在请求中指定的。而数据就是传入回调函数中的 JSON 数据。

动态创建<script>标签，设置其src，回调函数在src中设置：

                                var script = document.createElement("script");
                                script.src = "https://api.douban.com/v2/book/search?q=javascript&count=1&callback=handleResponse";
                                document.body.insertBefore(script, document.body.firstChild);

在页面中，返回的JSON作为参数传入回调函数中，我们通过回调函数来来操作数据。

                                function handleResponse(response){
                                // 对response数据进行操作代码
                                }
        
 实例： 
        <script type="text/javascript">
                function handleResponse(response){
                        console.log(response);
                }
                </script>
                <script type="text/javascript">
                window.onload = function() {

                var oBtn = document.getElementById('btn');

                oBtn.onclick = function() {     

                        var script = document.createElement("script");
                        script.src = "https://api.douban.com/v2/book/search?q=javascript&count=1&callback=handleResponse";
                        document.body.insertBefore(script, document.body.firstChild);

                };
                };
        </script>
-------------------------------------------

jQuery封装JSONP实现跨域：

对于经常用jQuery的开发者来说，能注意到jQuery封装的$.ajax中有一个dataType属性，如果将该属性设置成dataType:"jsonp"，就能实现JSONP跨域了。
需要了解的一点是，虽然jQuery将JSONP封装在$.ajax中，但是其本质与$.ajax不一样。

      <script type="text/javascript">
    $(function(){
        $("#btn").click(function(){

            $.ajax({
                async : true,
                url : "https://api.douban.com/v2/book/search",
                type : "GET",
                dataType : "jsonp", // 返回的数据类型，设置为JSONP方式
                jsonp : 'callback', //指定一个查询参数名称来覆盖默认的 jsonp 回调参数名 callback
                jsonpCallback: 'handleResponse', //设置回调函数名
                data : {               //参数数据
                    q : "javascript", 
                    count : 1
                }, 
                success: function(response, status, xhr){
                    console.log('状态为：' + status + ',状态是：' + xhr.statusText);
                    console.log(response);
                }
            });
        });
    });
</script>

