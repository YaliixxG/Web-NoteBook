
AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。

AJAX 不是新的编程语言，而是一种使用现有标准的新方法。

AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下。

============================================================================

一、创建 XMLHttpRequest 对象 

XMLHttpRequest 对象用于和服务器交换数据

XMLHttpRequest是AJAX的基础，所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。

创建 XMLHttpRequest 对象的语法：
            variable=new XMLHttpRequest();

老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：
            variable=new ActiveXObject("Microsoft.XMLHTTP");

为了综合应对所有浏览器的支持，所以应该这么写：

        var xmlhttp;
        if (window.XMLHttpRequest)
        {// code for IE7+, Firefox, Chrome, Opera, Safari
        xmlhttp=new XMLHttpRequest();
        }
        else
        {// code for IE6, IE5
        xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
        }

========================================================================================

二、AJAX 向服务器发送请求

如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法：

xmlhttp.open("GET","ajax_info.txt",true);

open(method,url,async)    规定请求的类型，URL以及是否异步处理请求
                          method：请求的类型；GET 或 POST
                          url：文件在服务器上的位置，该文件可以是任何类型的文件，比如 .txt 和 .xml，或者服务器脚本文件，比如 .asp 和 .php （在传回响应之前，能够在服务器上执行任务）。
                          async：true（异步）或 false（同步）

                            Async=true
                            当使用 async=true 时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数：

                                                                                                xmlhttp.onreadystatechange=function()
                                                                                                {
                                                                                                if (xmlhttp.readyState==4 && xmlhttp.status==200)
                                                                                                    {
                                                                                                    document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
                                                                                                    }
                                                                                                }
                                                                                                xmlhttp.open("GET","ajax_info.txt",true);
                                                                                                xmlhttp.send();

                          async=false 时，请不要编写 onreadystatechange 函数 - 把代码放到 send() 语句后面即可：

                                                                                                xmlhttp.open("GET","ajax_info.txt",false);
                                                                                                xmlhttp.send();
                                                                                                document.getElementById("myDiv").innerHTML=xmlhttp.responseText;


xmlhttp.send();

send(string)              将请求发送到服务器。
                          string：仅用于 POST 请求 如果是GET请求，则send()就行



GET 还是 POST？
与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。
然而，在以下情况中，请使用 POST 请求：

                                    无法使用缓存文件（更新服务器上的文件或数据库）

                                    向服务器发送大量数据（POST 没有数据量限制）

                                    发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠

例子： GET请求

       xmlhttp.open("GET","demo_get.html?t="+Math.random(),true)
       xmlhttp.send()
       如果不向URL添加唯一的ID，则可能得到的是缓存的结果

       如果您希望通过 GET 方法发送信息，请向 URL 添加信息：
       xmlhttp.open("GET","demo_get2.html?fname=Henry&lname=Ford",true);
       xmlhttp.send();

       POST请求
       xmlhttp.open("POST","demo_post.html",true);
       xmlhttp.send();

       如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。
       然后在 send() 方法中规定您希望发送的数据：
        xmlhttp.open("POST","ajax_test.html",true);
        xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");
        xmlhttp.send("fname=Henry&lname=Ford");

================================================================================================

三、setRequestHeader(header,value) 向请求添加HTTP头
                               header：规定头的名称
                               value: 规定头的值

CONTENT-TYPE:application/x-www-form-urlencoded 表示客户端提交给服务器文本内容的编码方式 是URL编码，即除了标准字符外，每字节以双字节16进制前加个%表示
CONTENT-TYPE:multipart/form-data               表示窗体数据被编码为一条消息，页上的每个控件对应消息中的一个部分，这个一般文件上传时用。
CONTENT-TYPE:text/plain                        表示窗体数据以纯文本形式进行编码，其中不含任何控件或格式字符。 
Content-length                                 就是表示提交的数据字节大小 

==============================================================================================================

四、XHR 响应

AJAX - 服务器 响应

如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。

responseText	 获得字符串形式的响应数据。       document.getElementById("myDiv").innerHTML=xmlhttp.responseText;

responseXML	     获得 XML 形式的响应数据。        xmlDoc=xmlhttp.responseXML;
                                                txt="";
                                                x=xmlDoc.getElementsByTagName("ARTIST");
                                                for (i=0;i<x.length;i++)
                                                {
                                                txt=txt + x[i].childNodes[0].nodeValue + "<br>";
                                                }
                                                document.getElementById("myDiv").innerHTML=txt;

===================================================================================================================

五、XHR readyState

AJAX - onreadystatechange 事件

当请求被发送到服务器时，我们需要执行一些基于响应的任务。每当 readyState 改变时，就会触发 onreadystatechange 事件。readyState 属性存有 XMLHttpRequest 的状态信息。

onreadystatechange	存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。

readyState 存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。
                                                        0: 请求未初始化
                                                        1: 服务器连接已建立
                                                        2: 请求已接收
                                                        3: 请求处理中
                                                        4: 请求已完成，且响应已就绪

status	
        200: "OK"
        404: 未找到页面

实例： xmlhttp.onreadystatechange=function()
        {
        if (xmlhttp.readyState==4 && xmlhttp.status==200)      //当 readyState 等于 4 且状态为 200 时，表示响应已就绪：
            {
            document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
            }
        }

====================================================================================================================================

六、

